cmake_minimum_required(VERSION 3.0)

project(UsbAuth)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
add_compile_options(-DUNICODE) 

include_directories(${PROJECT_SOURCE_DIR}/src/)
file(GLOB_RECURSE SRC_DIR_LIST "${CMAKE_SOURCE_DIR}/src/*.cc")


if(CMAKE_BUILD_TYPE AND (CMAKE_BUILD_TYPE STREQUAL "Release"))
elseif(CMAKE_BUILD_TYPE AND (CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo"))
elseif(CMAKE_BUILD_TYPE AND (CMAKE_BUILD_TYPE STREQUAL "Debug"))
else()
SET(CMAKE_BUILD_TYPE "Debug")
endif()

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
    SET(SYSTEM_TYPE "linux")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Wall -O3")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall -O3")
    set(CMAKE_C_FLAGS_RELWITHDEBINFO  "${CMAKE_C_FLAGS_RELWITHDEBINFO} -Wall -O3 -g")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO  "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -Wall -O3 -g")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -Wall -O0 -g -ggdb")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -O0 -g -ggdb")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
    SET(SYSTEM_TYPE "windows")
    IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
        SET(CMAKE_SYSTEM_PROCESSOR x64)
    ELSE()
        SET(CMAKE_SYSTEM_PROCESSOR x86)
    ENDIF()
ENDIF ()

add_executable(UsbAuth ${SRC_DIR_LIST})
